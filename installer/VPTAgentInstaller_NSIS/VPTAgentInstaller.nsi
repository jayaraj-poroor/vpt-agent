; VPTAgentInstaller.nsi
; Generated by Excelsior Installer v2.2
; Mon Sep 15 13:04:12 IST 2014
; -----------------------------------------------------------------------------
; The installation script based on NSIS modern user interface
; -----------------------------------------------------------------------------
!define PACKAGENAME "VPTAgentInstaller"
!define EIT_LOG_FILENAME "nsis_install.log"
!define DEF_SHORTCUTS_EXISTS
!define PROJECT_ROOT_PATH "C:\Users\Harikrishnan\Desktop"
; -----------------------------------------------------------------------------
; Include Modern UI, logic statements, file functions and EIT support
!include "MUI2.nsh"
!include "x64.nsh"
!include "LogicLib.nsh"
!include "FileFunc.nsh"
!include "${PACKAGENAME}.nsh"
!include "${PACKAGENAME}_PageInstallType.nsh"
!include "${PACKAGENAME}_PageShortcuts.nsh"
!include "${PACKAGENAME}_PageFileAssociations.nsh"
!include "${PACKAGENAME}_PageInstallInfo.nsh"
;
;
; -----------------------------------------------------------------------------
; Configuration of the installation script
!define COMPANY_NAME "Shelloid"
!define DEFAULT_PROGRAM_FOLDER "Shelloid\VPT Agent 3"
; Valid values for installation type:  "auto" | "askuser" | "common" | "private"
!define DESIRED_INSTALL_TYPE "auto"
!define REGISTRY_KEY_NAME "Software\Shelloid\VPT Agent\3"
!define LICENSE_TEXT_FILE "D:\Project\shelloid\vpt-agent\installer\helperFiles\license.txt"

; Postinstall run:
${EIT_PostinstallRun} "$INSTDIR" "$INSTDIR\install_service.exe" ""

!define UNINSTALLER_RELPATH ""
!define CLEANUP_DIR
!define DEFAULT_FOLDER "Shelloid\VPT Agent 3"
!define UNINSTALLER_FILE_NAME  "Uninstall.exe"
!define UNINSTALLER_PATH       "$INSTDIR\${UNINSTALLER_RELPATH}"
; -----------------------------------------------------------------------------
; Declaration of variables
Var IsCommonInstallation
Var KeepOnUninstall
Var InstlDirWasNotEdited
Var LastDefaultInstalllDir
Var StartMenuFolder
; -----------------------------------------------------------------------------
; General Attributes
Name    "Shelloid VPT Agent 3" "Shelloid VPT Agent 3"
OutFile "\\?\${PROJECT_ROOT_PATH}\VPTAgentInstaller_NSIS\vpt_agent_setup.exe"

; Default installation folder
InstallDir "$PROGRAMFILES\Shelloid\VPT Agent 3"

; Version Information
VIAddVersionKey  "CompanyName"     "Shelloid"
VIAddVersionKey  "LegalCopyright"  "(c)Shelloid"
VIAddVersionKey  "ProductName"     "VPT Agent 3"
VIAddVersionKey  "ProductVersion"  "3"
VIAddVersionKey  "FileDescription" "VPT Agent 3"
VIAddVersionKey  "FileVersion"     "3"
VIProductVersion "3.0.0.0"

; The installer will perform a CRC on itself before allowing an install
CRCCheck on
; Request application privileges for Windows Vista
RequestExecutionLevel admin
BrandingText " "
; -----------------------------------------------------------------------------
; Interface Attributes and Settings
; The interface settings provided by the NSIS compiler itself (such as 
; LicenseText, Icon, CheckBitmap, InstallColors) should not be used in 
; Modern UI scripts. The Modern UI provides equalivent or extended 
; versions of these settings.
!define MUI_ABORTWARNING
!define MUI_WELCOMEPAGE_TITLE_3LINES
!define MUI_FINISHPAGE_TITLE_3LINES
!define MUI_UNICON "C:\Program Files (x86)\Excelsior Installer 2.2\bin\xuninst.ico"

!define MUI_HEADERIMAGE
!define MUI_HEADERIMAGE_RIGHT

!define MUI_HEADERIMAGE_BITMAP   "C:\Program Files (x86)\Excelsior Installer 2.2\bin\xinst_header.bmp"
!define MUI_HEADERIMAGE_UNBITMAP "C:\Program Files (x86)\Excelsior Installer 2.2\bin\xinst_header.bmp"

!define MUI_WELCOMEFINISHPAGE_BITMAP "C:\Program Files (x86)\Excelsior Installer 2.2\bin\xinst_page.bmp"

!define MUI_UNWELCOMEFINISHPAGE_BITMAP "C:\Program Files (x86)\Excelsior Installer 2.2\bin\xuninst_page.bmp"

!define MUI_WELCOMEPAGE_TITLE "$(MSG_WELCOMEPAGE_TITLE)"
!define MUI_WELCOMEPAGE_TEXT "$(MSG_WELCOMEPAGE_TEXT)"

; -----------------------------------------------------------------------------
; Installer Page Settings
; Do not display the checkbox to disable the creation of Start Menu shortcuts.
!define MUI_STARTMENUPAGE_NODISABLE
!ifdef MUI_FINISHPAGE_RUN
  !define MUI_FINISHPAGE_RUN_TEXT "$(MSG_FINISHPAGE_RUN_TEXT)"
!endif
!ifdef MUI_FINISHPAGE_SHOWREADME
  !define MUI_FINISHPAGE_SHOWREADME_TEXT "$(MSG_FINISHPAGE_SHOWREADME_TEXT)"
!endif
!ifdef FEATURE_REBOOT_NEEDED
  !define MUI_FINISHPAGE_TEXT_REBOOT      "$(MSG_FINISHPAGE_REBOOT_TEXT)"
  !define MUI_FINISHPAGE_TEXT_REBOOTNOW   "$(MSG_FINISHPAGE_REBOOT_NOW)"
  !define MUI_FINISHPAGE_TEXT_REBOOTLATER "$(MSG_FINISHPAGE_REBOOT_LATER)"
!endif
; -----------------------------------------------------------------------------
!ifdef CLEANUP_DIR
  !insertmacro EIT_FUNC_DECL_MkCleanupLogString
!endif
; -----------------------------------------------------------------------------
; If $INSTDIR was never edited by user - update it to default value to accept
; installation type changes
Function UpdateInstallDir
  ${if} $InstlDirWasNotEdited != 0
    StrCmp "$INSTDIR" "$LastDefaultInstalllDir" instdir_not_changed
    StrCpy $InstlDirWasNotEdited 0 ; oops. it was changed. turn this auto-update off
    Return
instdir_not_changed:
    StrCpy $INSTDIR "$PROGRAMFILES\Shelloid\VPT Agent 3"
    StrCpy $LastDefaultInstalllDir "$INSTDIR"
  ${endif}
FunctionEnd ; UpdateInstallDir
; -----------------------------------------------------------------------------
; Call at exit from MUI_PAGE_WELCOME:
Function CheckAdminRights
  Push $R1
  StrCpy $R1 ${DESIRED_INSTALL_TYPE}
  ; EIT_CheckAdminRights():
  ;   In:  R1 = ${DESIRED_INSTALL_TYPE}
  ;   Out: R1 = 1/0 - Admin/NoAdmin
  ;        (OR exit with 'Admin rigths required' message)
  Call   EIT_CheckAdminRights
  ${if} $R1 != 0
    ${if} ${DESIRED_INSTALL_TYPE} != "personal"
      ${EIT_SetCommonInstallType} 1 ; by default it was 0
      Call UpdateInstallDir
    ${endif}
  ${endif}
  Pop $R1
FunctionEnd ; CheckAdminRights
; -----------------------------------------------------------------------------
; Call at exit from EIT_MUI_PAGE_INSTALLTYPE:
Function AcceptInstallType
  ${EIT_SetCommonInstallType} $IsCommonInstallation
  Call UpdateInstallDir
FunctionEnd ; AcceptInstallType
; -----------------------------------------------------------------------------
; Installer Pages
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE  CheckAdminRights
!insertmacro MUI_PAGE_WELCOME
!ifdef LICENSE_TEXT_FILE
  !insertmacro MUI_PAGE_LICENSE "${LICENSE_TEXT_FILE}"
!endif
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE  AcceptInstallType
!insertmacro EIT_MUI_PAGE_INSTALLTYPE  $IsCommonInstallation
!insertmacro MUI_PAGE_DIRECTORY
!define MUI_STARTMENUPAGE_DEFAULTFOLDER  "${DEFAULT_PROGRAM_FOLDER}"
  !insertmacro MUI_PAGE_STARTMENU  Application $StartMenuFolder
!insertmacro EIT_MUI_PAGE_SHORTCUTS  EIT_CreateShortCut
!insertmacro EIT_MUI_PAGE_FILEASSOCIATIONS  EIT_CreateFileAssociation
!insertmacro EIT_MUI_PAGE_INSTALLINFO  $StartMenuFolder  \
                                       EIT_MUI_PAGE_SHORTCUTS_GetInstallInfo
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
; -----------------------------------------------------------------------------
; Uninstaller Page Settings
!ifdef UNINSTALL_FEEDBACK_URL
  !define MUI_FINISHPAGE_TEXT            "$(MSG_FEEDBACK_TEXT)"
  !define MUI_FINISHPAGE_SHOWREADME      ${UNINSTALL_FEEDBACK_URL}
  !define MUI_FINISHPAGE_SHOWREADME_TEXT "$(MSG_FEEDBACK_CHK_TEXT)"
!endif
; -----------------------------------------------------------------------------
; Uninstaller Pages
!insertmacro MUI_UNPAGE_WELCOME
;  !insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_UNPAGE_FINISH
; -----------------------------------------------------------------------------
; Languages
##SUPPORTED_LANGUAGES
!insertmacro MUI_LANGUAGE_EIT "English"
; -----------------------------------------------------------------------------
; Reserve Files
  ;If you are using solid compression, files that are required before
;the actual installation should be stored first in the data block,
;because this will make your installer start faster.
  !insertmacro MUI_RESERVEFILE_LANGDLL
; -----------------------------------------------------------------------------
; Installer Sections
Section "Installer Section"
  Push   $0
  StrCpy $0 ""  ; collect cleanup directopy log strings in $0
  StrCpy $KeepOnUninstall 0
  ; Call pre-install action of install customization DLL if it was 
  ; specified in the project
  !ifdef INSTALL_CALLBACK_DLL
    !insertmacro EIT_CALL_PREINSTALL "${INSTALL_CALLBACK_DLL}"
  !endif
  ; Set $OUTPATH, open install log and create uninstaller
  ${EIT_StartInstallation} "${UNINSTALLER_PATH}" "${UNINSTALLER_FILE_NAME}" "$0"
  ; Add package files to be extracted to the output path
  ${EIT_CreateDirectory} "$INSTDIR\bat"
  ${EIT_AddFile} "$INSTDIR\bat\genConfig.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\genConfig.bat"
  ${EIT_AddFile} "$INSTDIR\bat\installService.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\installService.bat"
  ${EIT_AddFile} "$INSTDIR\bat\queryService.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\queryService.bat"
  ${EIT_AddFile} "$INSTDIR\bat\runConsole.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\runConsole.bat"
  ${EIT_AddFile} "$INSTDIR\bat\runConsoleW.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\runConsoleW.bat"
  ${EIT_AddFile} "$INSTDIR\bat\runHelloWorld.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\runHelloWorld.bat"
  ${EIT_AddFile} "$INSTDIR\bat\runServicesManagerClient.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\runServicesManagerClient.bat"
  ${EIT_AddFile} "$INSTDIR\bat\runServicesManagerServer.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\runServicesManagerServer.bat"
  ${EIT_AddFile} "$INSTDIR\bat\setenv.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\setenv.bat"
  ${EIT_AddFile} "$INSTDIR\bat\startService.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\startService.bat"
  ${EIT_AddFile} "$INSTDIR\bat\stopService.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\stopService.bat"
  ${EIT_AddFile} "$INSTDIR\bat\systemTrayIcon.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\systemTrayIcon.bat"
  ${EIT_AddFile} "$INSTDIR\bat\sytemTrayIconW.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\sytemTrayIconW.bat"
  ${EIT_AddFile} "$INSTDIR\bat\uninstallService.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\uninstallService.bat"
  ${EIT_AddFile} "$INSTDIR\bat\wrapper.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\wrapper.bat"
  ${EIT_AddFile} "$INSTDIR\bat\wrapperW.bat" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\bat\wrapperW.bat"
  ${EIT_CreateDirectory} "$INSTDIR\conf"
  ${EIT_AddFile} "$INSTDIR\conf\wrapper.conf" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\conf\wrapper.conf"
  ${EIT_AddFile} "$INSTDIR\conf\wrapper.conf.default" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\conf\wrapper.conf.default"
  ${EIT_AddFile} "$INSTDIR\conf\wrapper.javaws.conf" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\conf\wrapper.javaws.conf"
  ${EIT_CreateDirectory} "$INSTDIR\lib"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core\commons"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-cli-2-SNAPSHOT.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-cli-2-SNAPSHOT.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-collections-3.2.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-collections-3.2.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-configuration-1.8.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-configuration-1.8.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-io-1.3.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-io-1.3.1.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-lang-2.4.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-lang-2.4.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-logging-1.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-logging-1.1.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\commons\commons-vfs2-2.0.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\commons\commons-vfs2-2.0.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core\groovy"
  ${EIT_AddFile} "$INSTDIR\lib\core\groovy\groovy-all-1.8.6.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\groovy\groovy-all-1.8.6.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core\jna"
  ${EIT_AddFile} "$INSTDIR\lib\core\jna\jna-3.4.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\jna\jna-3.4.1.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\jna\platform-3.4.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\jna\platform-3.4.1.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core\netty"
  ${EIT_AddFile} "$INSTDIR\lib\core\netty\netty-3.6.6.Final.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\netty\netty-3.6.6.Final.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core\regex"
  ${EIT_AddFile} "$INSTDIR\lib\core\regex\jrexx-1.1.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\regex\jrexx-1.1.1.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\core\yajsw"
  ${EIT_AddFile} "$INSTDIR\lib\core\yajsw\ahessian.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\yajsw\ahessian.jar"
  ${EIT_AddFile} "$INSTDIR\lib\core\ReadMe.txt" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\core\ReadMe.txt"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\abeille"
  ${EIT_AddFile} "$INSTDIR\lib\extended\abeille\formsrt.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\abeille\formsrt.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\commons"
  ${EIT_AddFile} "$INSTDIR\lib\extended\commons\commons-codec-1.3.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\commons\commons-codec-1.3.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\commons\commons-httpclient-3.0.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\commons\commons-httpclient-3.0.1.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\commons\commons-net-1.4.1.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\commons\commons-net-1.4.1.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\glazedlists"
  ${EIT_AddFile} "$INSTDIR\lib\extended\glazedlists\commons-beanutils-1.8.2.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\glazedlists\commons-beanutils-1.8.2.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\glazedlists\glazedlists-1.8.0_java15.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\glazedlists\glazedlists-1.8.0_java15.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\jgoodies"
  ${EIT_AddFile} "$INSTDIR\lib\extended\jgoodies\forms-1.2.0.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\jgoodies\forms-1.2.0.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\quartz"
  ${EIT_AddFile} "$INSTDIR\lib\extended\quartz\quartz-1.8.0.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\quartz\quartz-1.8.0.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\velocity"
  ${EIT_AddFile} "$INSTDIR\lib\extended\velocity\velocity-1.7.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\velocity\velocity-1.7.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\vfs-webdav"
  ${EIT_AddFile} "$INSTDIR\lib\extended\vfs-webdav\jackrabbit-webdav-1.5.6.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\vfs-webdav\jackrabbit-webdav-1.5.6.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\vfs-webdav\slf4j-api-1.5.0.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\vfs-webdav\slf4j-api-1.5.0.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\vfs-webdav\slf4j-jdk14-1.5.0.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\vfs-webdav\slf4j-jdk14-1.5.0.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\vfs-webdav\xercesImpl.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\vfs-webdav\xercesImpl.jar"
  ${EIT_CreateDirectory} "$INSTDIR\lib\extended\yajsw"
  ${EIT_AddFile} "$INSTDIR\lib\extended\yajsw\hessian4.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\yajsw\hessian4.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\yajsw\srvmgr.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\yajsw\srvmgr.jar"
  ${EIT_AddFile} "$INSTDIR\lib\extended\ReadMe.txt" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\lib\extended\ReadMe.txt"
  ${EIT_CreateDirectory} "$INSTDIR\log"
  ${EIT_AddFile} "$INSTDIR\log\.gitignore" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\log\.gitignore"
  ${EIT_CreateDirectory} "$INSTDIR\vpt"
  ${EIT_AddFile} "$INSTDIR\vpt\agent.cfg" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\vpt\agent.cfg"
  ${EIT_AddFile} "$INSTDIR\vpt\agent-3.0b.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\vpt\agent-3.0b.jar"
  ${EIT_AddFile} "$INSTDIR\vpt\logback.xml" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\vpt\logback.xml"
  ${EIT_AddFile} "$INSTDIR\configure.exe" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\configure.exe"
  ${EIT_AddFile} "$INSTDIR\install_service.exe" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\install_service.exe"
  ${EIT_AddFile} "$INSTDIR\LICENSE.txt" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\LICENSE.txt"
  ${EIT_AddFile} "$INSTDIR\run_agent.exe" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\run_agent.exe"
  ${EIT_AddFile} "$INSTDIR\start_service.exe" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\start_service.exe"
  ${EIT_AddFile} "$INSTDIR\stop_service.exe" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\stop_service.exe"
  ${EIT_AddFile} "$INSTDIR\uninstall_service.exe" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\uninstall_service.exe"
  ${EIT_AddFile} "$INSTDIR\VPTInstaller-2.0.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\VPTInstaller-2.0.jar"
  ${EIT_AddFile} "$INSTDIR\wrapper.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\wrapper.jar"
  ${EIT_AddFile} "$INSTDIR\wrapperApp.jar" "${PROJECT_ROOT_PATH}\shelloid-vpt-agent\wrapperApp.jar"
  StrCpy $KeepOnUninstall 0
  ; Create registry key
  !ifdef REGISTRY_KEY_NAME
    ${EIT_WriteRegStr} SHCTX "${REGISTRY_KEY_NAME}" "InstallPath" "$INSTDIR"
  !endif
  ; Create Start Menu shortcuts
  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application
    ${EIT_CreateDirRecursively}   "$SMPROGRAMS\$StartMenuFolder\Services"
    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Services\Install Service.lnk"  "$INSTDIR\install_service.exe"  \
        '""'  "$INSTDIR"

    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Services\Start Service.lnk"  "$INSTDIR\start_service.exe"  \
        '""'  "$INSTDIR"

    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Services\Stop Service.lnk"  "$INSTDIR\stop_service.exe"  \
        '""'  "$INSTDIR"

    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Services\Uninstall Service.lnk"  "$INSTDIR\uninstall_service.exe"  \
        '""'  "$INSTDIR"

    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Configure VPT Agent.lnk"  "$INSTDIR\configure.exe"  \
        '""'  "$INSTDIR"

    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Run VPT Agent (Standalone).lnk"  "$INSTDIR\run_agent.exe"  \
        '""'  "$INSTDIR"

    ${EIT_CreateShortCut}  \
        "$SMPROGRAMS\$StartMenuFolder\Uninstall Shelloid VPT Agent.lnk"  "$INSTDIR\Uninstall.exe"  \
        '""'  "$INSTDIR"

  !insertmacro MUI_STARTMENU_WRITE_END
  ; Create file extension associations
  ${EIT_MUI_PAGE_FILEASSOCIATIONS_CreateFileAssociation} 
  ; Call post-install action of install customization DLL if it was 
  ; specified in the project
  !ifdef INSTALL_CALLBACK_DLL
    !insertmacro EIT_CALL_POSTINSTALL
  !endif
  ${EIT_ExecWait} '"$INSTDIR\configure.exe" ' 
  !ifdef FEATURE_REBOOT_NEEDED
    SetRebootFlag true
  !endif
  Pop $0
  System::Call 'shell32::SHChangeNotify(i 0x08000000, i 0, i 0, i 0) v'
SectionEnd ; Installer Sections
; -----------------------------------------------------------------------------
; Customization of install NSIS callbacks
Function .onInit
  StrCpy $InstlDirWasNotEdited 1
  StrCpy $LANGUAGE 1033
  !ifdef SPLASH_FILE
    InitPluginsDir     
    File /oname=$PLUGINSDIR\splash.bmp "${SPLASH_FILE}"
    splash::show 1000 $PLUGINSDIR\splash
    Pop $0
  !endif
  !ifdef REGISTRY_KEY_NAME
    ReadRegStr $R0 HKLM "${REGISTRY_KEY_NAME}" "InstallPath"
    ${if} $R0 == ''
      ClearErrors
      ReadRegStr $R0 HKCU "${REGISTRY_KEY_NAME}" "InstallPath"
    ${endif}
    ${if} $R0 != ''
      ClearErrors
      FileOpen $R0 "${UNINSTALLER_PATH}${EIT_LOG_FILENAME}" "r"
      ${if} ${Errors}
        ClearErrors
      ${else}
        FileClose $R0
        MessageBox MB_YESNO "$(MSG_PREV_INST_FOUND)" IDYES L_DoInstall
        Quit
L_DoInstall:
      ${endif}
    ${endif}
  !endif
  StrCpy $LastDefaultInstalllDir $INSTDIR
FunctionEnd
; -----------------------------------------------------------------------------
Function .onInstFailed
  ${EIT_AbortInstallation} "${UNINSTALLER_PATH}" "${UNINSTALLER_FILE_NAME}"
FunctionEnd
; -----------------------------------------------------------------------------
Function .onInstSuccess
  ${EIT_EndInstallation} "${COMPANY_NAME}" "${UNINSTALLER_PATH}" "${UNINSTALLER_FILE_NAME}"
FunctionEnd
; -----------------------------------------------------------------------------
; Uninstaller Section
Section "un.Uninstaller Section"
  ; Call pre-uninstall action of uninstall customization DLL if it was 
  ; specified in the project
  !ifdef UNINSTALL_CALLBACK_DLL
  !endif
  ; at this point the $INSTDIR contais the path to Uninstall.exe
  ${un.EIT_ExecuteUninstall} "$INSTDIR\"
  RMDir "$INSTDIR"
SectionEnd ; Uninstaller Section
; -----------------------------------------------------------------------------
; Customization of uninstall NSIS callbacks
Function un.onInit
  StrCpy $LANGUAGE 1033
FunctionEnd
